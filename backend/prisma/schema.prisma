// This is your updated Prisma schema file
// 모든 소비자 폼 데이터를 완벽하게 저장하기 위한 스키마 업데이트

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

// User model - 변경 없음
model User {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  email             String   @unique
  googleId          String   @unique
  provider          Provider @default(GOOGLE)
  role              Role     @default(USER)
  name              String
  profilePicture    String?
  company           String?
  phone             String?
  isActive          Boolean  @default(true)
  emailVerified     Boolean  @default(true)
  isProfileComplete Boolean  @default(false)
  lastLogin         DateTime?
  
  // Preferences as embedded document
  preferences       UserPreferences
  
  // Relations
  submissions       Submission[]
  reviewedSubmissions Submission[] @relation("ReviewedSubmissions")
  savedArtists      SavedArtist[]
  savedContributors SavedContributor[]
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@index([role, isActive])
  @@index([createdAt])
  @@index([isProfileComplete])
}

// User preferences type
type UserPreferences {
  language      Language @default(KO)
  notifications NotificationSettings
}

type NotificationSettings {
  email Boolean @default(true)
  sms   Boolean @default(false)
  push  Boolean @default(true)
}

// Submission model - 업데이트됨
model Submission {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  status          SubmissionStatus @default(PENDING)
  submitterEmail  String
  submitterName   String
  submitterId     String           @db.ObjectId
  submitter       User             @relation(fields: [submitterId], references: [id])
  
  // Artist info - 다중 언어 번역 추가
  artistName      String
  artistNameEn    String?
  artistTranslations Translation[]  // 추가: 아티스트 다중 언어 번역
  labelName       String?
  genre           String[]
  biography       String?
  socialLinks     SocialLinks?
  artistType      ArtistType?
  members         Member[]
  
  // Artist platform IDs
  spotifyId       String?
  appleMusicId    String?
  youtubeChannelId String?
  
  // Album info - 추가 필드
  albumTitle      String
  albumTitleEn    String?
  albumTranslations Translation[]
  albumType       AlbumType
  releaseDate     DateTime
  albumDescription String?
  albumVersion    String?
  releaseVersion  String?
  albumGenre      String[]
  albumSubgenre   String[]
  primaryTitle    String?         // 추가
  hasTranslation  Boolean?        // 추가
  translationLanguage String?     // 추가
  translatedTitle String?         // 추가
  albumContributors Contributor[]  // 추가: 앨범 레벨 기여자
  
  // Tracks
  tracks          Track[]
  
  // Files
  files           Files
  
  // Release info
  release         ReleaseInfo
  
  // Marketing info
  marketing       MarketingInfo?
  
  // Admin fields
  adminNotes      String?
  reviewedBy      String?          @db.ObjectId
  reviewer        User?            @relation("ReviewedSubmissions", fields: [reviewedBy], references: [id])
  reviewedAt      DateTime?
  
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  @@index([status, createdAt])
  @@index([submitterId, createdAt])
  @@index([releaseDate], map: "approved_releases_index")
  @@fulltext([artistName, albumTitle])
}

// Embedded types for Submission
type SocialLinks {
  instagram   String?
  youtube     String?
  spotify     String?
  appleMusic  String?
  twitter     String?
  facebook    String?
  tiktok      String?
  website     String?
}

type Member {
  name        String
  role        String
  spotifyUrl  String?  // 추가
  appleMusicUrl String? // 추가
}

// Enhanced Translation type for albums and general content
type Translation {
  id       String
  language String  // Language code (e.g., 'en', 'ko', 'ja')
  title    String  // Translated title
}

// 추가: 기여자 타입
type Contributor {
  name          String
  translations  Translation[]
  roles         String[]
  instruments   String[]
  spotifyUrl    String?
  appleMusicUrl String?
}

type Track {
  id                    String
  titleKo               String
  titleEn               String
  
  // Multi-language translations for track titles
  translations          Translation[]   // Array of translations for track title
  
  artists               String[]        // 추가
  featuringArtists      String[]        // 추가
  contributors          Contributor[]   // 추가
  composer              String
  lyricist              String
  arranger              String?
  featuring             String?
  isTitle               Boolean @default(false)
  isrc                  String?
  explicitContent       Boolean @default(false)
  
  // Track version management (Instrumental, Remix, etc.)
  trackVersion          String?         // Standard or custom version
  versionType           TrackVersionType @default(ORIGINAL)
  
  lyricsLanguage        String?
  producer              String?
  mixer                 String?
  masterer              String?
  previewStart          Int?
  previewEnd            Int?
  genre                 String?
  subgenre              String?
  alternateGenre        String?
  alternateSubgenre     String?
  lyrics                String? @db.String
  audioLanguage         String?
  metadataLanguage      String?
  playtimeStartShortClip Int?
  previewLength         Int?
  trackType             TrackType @default(AUDIO)
  dolbyAtmos            Boolean @default(false)
  stereo                Boolean @default(false)  // 추가
  hasCustomReleaseDate  Boolean?                 // 추가
  consumerReleaseDate   DateTime?                // 추가
  releaseTime           String?                  // 추가
}

type Files {
  coverImage        String?
  artistPhoto       String?
  audioFiles        AudioFile[]
  additionalFiles   AdditionalFile[]
  motionArt         String?
  musicVideo        String?
  coverImageUrl     String?
  artistPhotoUrl    String?
  motionArtUrl      String?
  musicVideoUrl     String?
}

type AudioFile {
  trackId     String
  filename    String?
  fileSize    Int?
  duration    Int?
  dropboxUrl  String?
  fileName    String?
}

type AdditionalFile {
  filename    String?
  fileType    String?
  fileSize    Int?
  dropboxUrl  String?
  fileName    String?
}

// 추가: 한국 DSP 정보 타입
type KoreanDSPInfo {
  lyricsAttached    Boolean
  artistPageLink    String?
  melonLink         String?
  genieLink         String?
  bugsLink          String?
  vibeLink          String?
  translation       KoreanTranslation?
  newArtist         Boolean?
  albumCredits      String?
}

type KoreanTranslation {
  hasTranslation    Boolean
  koreanTitle       String?
  englishTitle      String?
  artistNameKo      String?
  artistNameEn      String?
  labelNameKo       String?
  labelNameEn       String?
}

type ReleaseInfo {
  distributors              String[]
  priceType                 PriceType @default(FREE)
  price                     Float?
  copyrightHolder           String?
  copyrightYear             String
  recordingCountry          String
  recordingLanguage         String
  upc                       String?
  catalogNumber             String?
  territories               String[]
  notes                     String?
  originalReleaseDate       String
  consumerReleaseDate       String
  releaseTime               String?
  selectedTimezone          String?
  cRights                   String
  pRights                   String
  previewStart              Int?
  territoryType             TerritoryType @default(WORLDWIDE)
  albumNotes                String?
  parentalAdvisory          ParentalAdvisory @default(NONE)
  preOrderEnabled           Boolean @default(false)
  preOrderDate              String?
  releaseFormat             ReleaseFormat @default(STANDARD)
  isCompilation             Boolean @default(false)
  previouslyReleased        Boolean @default(false)
  previousReleaseDate       String?
  previousReleaseInfo       String?
  trackGenres               Json?
  dspProfileUpdate          DspProfileUpdate?
  
  // 추가: DSP별 지역 설정
  dspTerritories            Json?
  
  // 추가: 한국 DSP 정보
  koreanDSP                 KoreanDSPInfo?
  
  // 추가: FUGA 호환 마케팅 필드들
  // Project Context
  priorityLevel             Int?            // 1-5 성급 평가
  projectType               ProjectType?    // Frontline 또는 Catalog
  privateListeningLink      String?         // 비공개 청취 링크
  factSheetsUrl             String?         // Fact Sheets/Project Deck URL
  
  // 기존 마케팅 필드들
  albumIntroduction         String?
  albumDescription          String?
  marketingKeywords         String?
  targetAudience            String?
  promotionPlans            String?
  toundatesUrl              String?
  artistGender              String?
  socialMovements           String?
  artistBio                 String?
  similarArtists            String?
  hasSyncHistory            Boolean?
  syncHistory               String?
  spotifyArtistId           String?
  appleMusicArtistId        String?
  soundcloudArtistId        String?
  artistUgcPriorities       String?
  youtubeUrl                String?
  tiktokUrl                 String?
  facebookUrl               String?
  instagramUrl              String?
  xUrl                      String?
  twitchUrl                 String?
  threadsUrl                String?
  moods                     String[]
  instruments               String[]
  hook                      String?
  mainPitch                 String?
  marketingDrivers          String?
  socialMediaPlan           String?
  artistName                String?
  artistCountry             String?
  artistCurrentCity         String?
  artistHometown            String?
  artistAvatar              String?
  artistLogo                String?
  pressShotUrl              String?
  pressShotCredits          String?
}

type DspProfileUpdate {
  updateProfile                Boolean @default(false)
  internationalFormCompleted   Boolean?
}

// Enums - 변경 없음
enum Provider {
  GOOGLE
}

enum Role {
  ADMIN
  USER
  GUEST
}

enum Language {
  KO
  EN
}

enum SubmissionStatus {
  PENDING
  APPROVED
  REJECTED
}

enum ArtistType {
  SOLO
  GROUP
  DUO
  BAND
  ORCHESTRA
  CHOIR
  DJ
  PRODUCER
}

enum AlbumType {
  SINGLE
  EP
  ALBUM
}

enum TrackType {
  AUDIO
  MUSIC_VIDEO
}

enum TrackVersionType {
  ORIGINAL
  INSTRUMENTAL
  ACAPELLA
  RADIO_EDIT
  EXTENDED_MIX
  CLUB_MIX
  REMIX
  ACOUSTIC
  LIVE
  DEMO
  KARAOKE
  CLEAN
  EXPLICIT
  REMASTERED
  DELUXE
  ALTERNATIVE
  CUSTOM
}

enum PriceType {
  FREE
  PAID
}

enum TerritoryType {
  WORLDWIDE
  SELECT
  EXCLUDE
}

enum ParentalAdvisory {
  NONE
  EXPLICIT
  CLEAN
}

enum ReleaseFormat {
  STANDARD
  DELUXE
  SPECIAL
  REMASTERED
  ANNIVERSARY
}

enum ProjectType {
  FRONTLINE
  CATALOG
}

// Marketing information type
type MarketingInfo {
  genre                     String
  subgenre                  String?
  tags                      String[]
  similarArtists            String[]
  marketingAngle            String?
  pressRelease              String?
  marketingBudget           String?
  socialMediaCampaign       String?
  spotifyPitching           String?
  appleMusicPitching        String?
  tiktokStrategy            String?
  youtubeStrategy           String?
  instagramStrategy         String?
  facebookStrategy          String?
  twitterStrategy           String?
  influencerOutreach        String?
  playlistTargets           String[]
  radioTargets              String[]
  pressTargets              String[]
  tourDates                 TourDate[]
  merchandising             String?
  specialEditions           String?
  musicVideoPlans           String?
  behindTheScenes           String?
  documentaryPlans          String?
  nftStrategy               String?
  metaverseActivations      String?
  brandPartnerships         String?
  syncOpportunities         String?
  distributionPlatforms     DistributionPlatforms
  pricing                   PricingInfo
}

type TourDate {
  date      DateTime
  venue     String
  city      String
}

type DistributionPlatforms {
  spotify       Boolean
  appleMusic    Boolean
  youtube       Boolean
  amazonMusic   Boolean
  tidal         Boolean
  deezer        Boolean
  soundcloud    Boolean
  bandcamp      Boolean
  audiomack     Boolean
  kkbox         Boolean
  lineMusic     Boolean
  qq            Boolean
  netease       Boolean
  joox          Boolean
  boomplay      Boolean
  anghami       Boolean
  yandex        Boolean
  vk            Boolean
  custom        String[]
}

type PricingInfo {
  defaultPrice      String
  currency          String
  territoryPricing  Json?
}

// Saved Artist model
model SavedArtist {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  userId        String   @db.ObjectId
  user          User     @relation(fields: [userId], references: [id])
  name          String
  translations  ArtistTranslation[]
  identifiers   ArtistIdentifier[]
  createdAt     DateTime @default(now())
  lastUsed      DateTime @default(now())
  usageCount    Int      @default(1)
  
  @@index([userId, name])
  @@index([userId, lastUsed])
  @@fulltext([name])
}

// Saved Contributor model
model SavedContributor {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  userId        String   @db.ObjectId
  user          User     @relation(fields: [userId], references: [id])
  name          String
  roles         String[]
  instruments   String[]
  translations  ArtistTranslation[]
  identifiers   ArtistIdentifier[]
  createdAt     DateTime @default(now())
  lastUsed      DateTime @default(now())
  usageCount    Int      @default(1)
  
  @@index([userId, name])
  @@index([userId, lastUsed])
  @@index([userId, roles])
  @@fulltext([name])
}

// Embedded types for SavedArtist and SavedContributor
type ArtistTranslation {
  language String
  name     String
}

type ArtistIdentifier {
  type  IdentifierType
  value String
  url   String?
}

enum IdentifierType {
  SPOTIFY
  APPLE_MUSIC
  YOUTUBE
  ISNI
  IPI
}

// DSP (Digital Service Provider) model
model DSP {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  dspId           String   @unique // Unique ID from FUGA
  name            String
  code            String?  // Short code like (A) or (via IIP-DDS)
  description     String?  @db.String
  contactEmail    String?
  territories     String[] // e.g., ["World", "Americas (United States of America)"]
  availability    String   // e.g., "Immediately"
  isActive        Boolean  @default(true)
  isHD            Boolean  @default(false) // For HD audio services
  serviceType     ServiceType @default(STREAMING)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@index([isActive])
  @@index([serviceType])
  @@fulltext([name])
}

enum ServiceType {
  STREAMING
  DOWNLOAD
  FINGERPRINTING
  VIDEO
  RADIO
  SOCIAL
  OTHER
}

// Territory Selection model
model TerritorySelection {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  releaseId        String   @db.ObjectId // Reference to Submission
  selectionType    TerritorySelectionType
  selectedCountries String[] // Country codes (e.g., ["US", "JP", "KR"])
  excludedCountries String[] // For worldwide with exclusions
  
  // Per-DSP territory customization
  dspTerritories   DSPTerritory[]
  
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  @@index([releaseId])
}

// Per-DSP territory customization
type DSPTerritory {
  dspId           String   // Reference to DSP.dspId
  dspName         String   // DSP name for display
  selectionType   TerritorySelectionType
  countries       String[] // Country codes for this specific DSP
}

enum TerritorySelectionType {
  WORLDWIDE       // All countries
  SPECIFIC        // Only selected countries
  WORLDWIDE_EXCEPT // All countries except excluded ones
}