name: Build and Deploy to Docker Hub and EC2

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  DOCKER_IMAGE: ddalgiwuu/n3rve-platform

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        platforms: linux/amd64
        push: true
        tags: |
          ${{ env.DOCKER_IMAGE }}:latest
          ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
        cache-from: type=registry,ref=${{ env.DOCKER_IMAGE }}:buildcache
        cache-to: type=registry,ref=${{ env.DOCKER_IMAGE }}:buildcache,mode=max

  deploy-to-ec2:
    needs: build-and-push
    runs-on: ubuntu-latest
    
    steps:
    - name: Deploy to EC2
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ubuntu
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          # Navigate to project directory
          cd /home/ubuntu/n3rve-onboarding-platform
          
          # Pull latest code
          git pull origin main
          
          # Update Docker image tag in docker-compose.yml
          sed -i "s|image: ddalgiwuu/n3rve-platform:.*|image: ${{ env.DOCKER_IMAGE }}:latest|g" docker-compose.yml
          
          # Stop and remove all containers
          docker-compose down
          
          # Pull latest image
          docker pull ${{ env.DOCKER_IMAGE }}:latest
          
          # Start all services with docker-compose
          docker-compose up -d
          
          # Wait for services to be ready
          sleep 10
          
          # Check container status
          docker-compose ps
          
          # Clean up old images
          docker image prune -f