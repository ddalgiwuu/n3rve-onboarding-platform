name: Build and Deploy to Docker Hub and EC2

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  DOCKER_IMAGE: ddalgiwuu/n3rve-platform
  VERSION: v1.3.${{ github.run_number }}

jobs:
  check-secrets:
    runs-on: ubuntu-latest
    outputs:
      secrets-ok: ${{ steps.check.outputs.ok }}
    
    steps:
    - name: Check required secrets
      id: check
      run: |
        MISSING_SECRETS=""
        
        if [ -z "${{ secrets.DOCKER_USERNAME }}" ]; then
          MISSING_SECRETS="${MISSING_SECRETS}- DOCKER_USERNAME\n"
        fi
        
        if [ -z "${{ secrets.DOCKER_PASSWORD }}" ]; then
          MISSING_SECRETS="${MISSING_SECRETS}- DOCKER_PASSWORD\n"
        fi
        
        if [ -z "${{ secrets.EC2_SSH_KEY }}" ]; then
          MISSING_SECRETS="${MISSING_SECRETS}- EC2_SSH_KEY\n"
        fi
        
        if [ -n "$MISSING_SECRETS" ]; then
          echo "::error::Missing required GitHub Secrets:"
          echo -e "$MISSING_SECRETS"
          echo ""
          echo "Please go to: https://github.com/ddalgiwuu/n3rve-onboarding-platform/settings/secrets/actions"
          echo "And add the missing secrets:"
          echo "- DOCKER_USERNAME: Your Docker Hub username (ddalgiwuu)"
          echo "- DOCKER_PASSWORD: Your Docker Hub access token"
          echo "- EC2_SSH_KEY: Content of N3RVE_AWS.pem file"
          echo "ok=false" >> $GITHUB_OUTPUT
          exit 1
        else
          echo "âœ… All required secrets are configured"
          echo "ok=true" >> $GITHUB_OUTPUT
        fi

  build-and-push:
    needs: check-secrets
    if: needs.check-secrets.outputs.secrets-ok == 'true'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Check Docker Hub credentials
      run: |
        if [ -z "${{ secrets.DOCKER_USERNAME }}" ]; then
          echo "::error::DOCKER_USERNAME secret is not set!"
          exit 1
        fi
        if [ -z "${{ secrets.DOCKER_PASSWORD }}" ]; then
          echo "::error::DOCKER_PASSWORD secret is not set!"
          exit 1
        fi
        echo "Docker Hub credentials are configured"

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
      continue-on-error: true

    - name: Verify Docker login
      run: |
        if ! docker info >/dev/null 2>&1; then
          echo "::error::Docker login failed!"
          exit 1
        fi
        echo "Docker login successful"

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        platforms: linux/amd64
        push: true
        tags: |
          ${{ env.DOCKER_IMAGE }}:latest
          ${{ env.DOCKER_IMAGE }}:${{ env.VERSION }}
          ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
        no-cache: true
        build-args: |
          BUILDKIT_INLINE_CACHE=1
      continue-on-error: true

    - name: Check build result
      if: failure()
      run: |
        echo "::error::Docker build or push failed! Please check:"
        echo "1. Docker Hub credentials are correct"
        echo "2. Repository name 'ddalgiwuu/n3rve-platform' exists"
        echo "3. Your Docker Hub account has push permissions"
        exit 1

  deploy-to-ec2:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: success()
    
    steps:
    - name: Check EC2 SSH key
      run: |
        if [ -z "${{ secrets.EC2_SSH_KEY }}" ]; then
          echo "::error::EC2_SSH_KEY secret is not set!"
          echo "Please add your EC2 private key (N3RVE_AWS.pem) content to GitHub Secrets"
          exit 1
        fi
        echo "EC2 SSH key is configured"
        
    - name: Deploy to EC2
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: 52.78.81.116
        username: ubuntu
        key: ${{ secrets.EC2_SSH_KEY }}
        port: 22
        timeout: 60s
        command_timeout: 30m
        script: |
          set -e
          echo "=== Starting deployment ==="
          
          # Navigate to project directory
          cd /home/ubuntu/n3rve-onboarding-platform
          
          # Pull latest code (force update with sudo for permission issues)
          echo "Pulling latest code..."
          git fetch origin main
          sudo git reset --hard origin/main
          sudo git clean -fd
          # Fix ownership issues
          sudo chown -R ubuntu:ubuntu /home/ubuntu/n3rve-onboarding-platform
          
          # Stop all containers
          echo "Stopping containers..."
          docker-compose -f docker-compose.prod.yml down -v || true
          
          # Force remove any existing container with the same name
          echo "Removing existing containers..."
          docker stop n3rve-app || true
          docker rm n3rve-app || true
          docker ps -a | grep n3rve | awk '{print $1}' | xargs -r docker rm -f || true
          
          # Clean up Docker system
          echo "Cleaning Docker system..."
          docker system prune -f || true
          
          # Pull latest image
          echo "Pulling latest Docker image..."
          docker pull ${{ env.DOCKER_IMAGE }}:latest
          
          # Tag version for tracking
          echo "Deployment version: ${{ env.VERSION }}"
          
          # Run container directly without docker-compose
          echo "Starting services..."
          docker run -d \
            --name n3rve-app \
            -p 80:80 \
            -p 443:443 \
            -p 3001:3001 \
            --env-file .env \
            -v /etc/letsencrypt:/etc/letsencrypt:ro \
            --restart always \
            ${{ env.DOCKER_IMAGE }}:latest
          
          # Wait for services to be ready
          echo "Waiting for services to be ready..."
          sleep 15
          
          # Check container status
          echo "Container status:"
          docker ps -a | grep n3rve
          
          # Check logs
          echo "App logs:"
          docker logs n3rve-app --tail 30 || true
          
          # Clean up old images
          echo "Cleaning up old images..."
          docker image prune -f
          
          echo "=== Deployment completed ==="
          echo "Deployed version: ${{ env.VERSION }}"
          echo "GitHub SHA: ${{ github.sha }}"
          echo "Deployment time: $(date)"
          
    - name: Create deployment summary
      if: success()
      run: |
        echo "## ðŸš€ Deployment Successful!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Version**: ${{ env.VERSION }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Site**: https://n3rve-onboarding.com" >> $GITHUB_STEP_SUMMARY
        echo "- **Time**: $(date)" >> $GITHUB_STEP_SUMMARY