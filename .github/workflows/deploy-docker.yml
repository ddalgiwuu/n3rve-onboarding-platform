name: Build and Deploy to Docker Hub and EC2

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  DOCKER_IMAGE: ddalgiwuu/n3rve-platform

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        platforms: linux/amd64
        push: true
        tags: |
          ${{ env.DOCKER_IMAGE }}:latest
          ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
        no-cache: true
        build-args: |
          BUILDKIT_INLINE_CACHE=1

  deploy-to-ec2:
    needs: build-and-push
    runs-on: ubuntu-latest
    
    steps:
    - name: Check EC2 connectivity
      run: |
        echo "Testing connection to EC2..."
        echo "Host: ${{ secrets.EC2_HOST }}"
        
    - name: Deploy to EC2
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: 52.78.81.116
        username: ubuntu
        key: ${{ secrets.EC2_SSH_KEY }}
        port: 22
        timeout: 60s
        command_timeout: 30m
        script: |
          set -e
          echo "=== Starting deployment ==="
          
          # Navigate to project directory
          cd /home/ubuntu/n3rve-onboarding-platform
          
          # Pull latest code
          echo "Pulling latest code..."
          git pull origin main
          
          # Stop all containers
          echo "Stopping containers..."
          docker-compose -f docker-compose.prod.yml down || true
          
          # Force remove any existing container with the same name
          echo "Removing existing containers..."
          docker stop n3rve-app || true
          docker rm n3rve-app || true
          
          # Pull latest image
          echo "Pulling latest Docker image..."
          docker pull ${{ env.DOCKER_IMAGE }}:latest
          
          # Start all services with production docker-compose
          echo "Starting services..."
          docker-compose -f docker-compose.prod.yml up -d
          
          # Wait for services to be ready
          echo "Waiting for services to be ready..."
          sleep 15
          
          # Check container status
          echo "Container status:"
          docker-compose -f docker-compose.prod.yml ps
          
          # Check logs
          echo "App logs:"
          docker logs n3rve-app --tail 20 || true
          
          # Clean up old images
          echo "Cleaning up old images..."
          docker image prune -f
          
          echo "=== Deployment completed ==="